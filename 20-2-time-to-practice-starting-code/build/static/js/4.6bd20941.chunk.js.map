{"version":3,"sources":["components/quotes/NoQuotesFound.js","components/quotes/NoQuotesFound.module.css","components/comments/Comments.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/comments/NewCommentForm.module.css","components/quotes/HighlightedQuote.module.css","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/NewCommentForm.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["NoQuotesFound","className","classes","noquotes","to","module","exports","CommentItem","props","item","text","CommentsList","comments","map","comment","id","NewCommentForm","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","quoteId","form","onSubmit","LoadingSpinner","control","htmlFor","rows","ref","actions","Comments","useParams","getAllComments","loadedComments","data","useState","isAddingComment","setIsAddingComment","addedCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetail","params","match","useRouteMatch","getSingleQuote","loadedQuote","path","exact","url"],"mappings":"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","file":"static/js/4.6bd20941.chunk.js","sourcesContent":["import { Link } from 'react-router-dom/cjs/react-router-dom.min';\nimport classes from './NoQuotesFound.module.css';\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link className='btn' to='/new-quote'>\n        Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__1l42s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__2bGBa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__2qDAC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__1a7HJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__3AncJ\",\"loading\":\"NewCommentForm_loading__1RKuI\",\"control\":\"NewCommentForm_control__1BLkp\",\"actions\":\"NewCommentForm_actions__2DK0r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__2DiLh\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useRef, useEffect } from 'react';\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddedComment } = props;\n\n  useEffect(() => {\n    if(status === 'completed' && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n\n    sendRequest( { commentData: { text: enteredText }, quoteId: props.quoteId });\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n\n      {status === 'pending' && (\n        <div className='centered'>\n            <LoadingSpinner />\n        </div>\n      )} \n\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import { useCallback, useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\nimport classes from './Comments.module.css';\nimport CommentsList from './CommentsList';\nimport NewCommentForm from './NewCommentForm';\n\nconst Comments = () => {\n\n  const params = useParams();\n\n  const { quoteId } = params;\n\n  const {sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  const [isAddingComment, setIsAddingComment] = useState(false);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  let comments;\n  \n  if( status === 'pending') {\n    comments = (\n      <div className='centered'>\n          <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if( status === 'completed' && ( loadedComments || loadedComments.length > 0  ) ) {\n    comments = <CommentsList comments={loadedComments} />\n  }\n\n  if( status === 'completed' && ( !loadedComments || loadedComments.length === 0  ) ) {\n    comments = <p className='centered'>No comments were added yet!</p>\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm onAddedComment={addedCommentHandler} quoteId={quoteId} />}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useEffect } from 'react';\r\nimport { Route, useParams, Link, useRouteMatch } from \"react-router-dom\";\r\nimport Comments from \"../components/comments/Comments\";\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport NoQuotesFound from \"../components/quotes/NoQuotesFound\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getAllQuotes, getSingleQuote } from \"../lib/api\";\r\n\r\nconst QuoteDetail = () => {\r\n\r\n    const params = useParams();\r\n\r\n    const match = useRouteMatch();\r\n\r\n    const {quoteId} = params;\r\n\r\n    const { sendRequest, status, data: loadedQuote, error } = useHttp(\r\n        getSingleQuote,\r\n        true\r\n    );\r\n\r\n    useEffect(() => {\r\n        sendRequest(quoteId);\r\n    }, [sendRequest, quoteId]);\r\n\r\n    if( status === 'pending') {\r\n        return (\r\n            <div className='centered'>\r\n                <LoadingSpinner />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if( status === 'error') {\r\n        return <p className='centered focused'>{error}</p>;\r\n    }\r\n\r\n    \r\n    if(!loadedQuote.text) {\r\n        return <p>No quote found!</p>;\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n\r\n            <Route path={match.path} exact>\r\n                <div className='centered'>\r\n                    <Link className='btn--flat' to={`${match.url}/comments`}>Load Comments</Link>\r\n                </div>\r\n            </Route>\r\n            \r\n            <Route path={`${match.path}/comments`}>\r\n                <Comments />\r\n            </Route>\r\n        </section>\r\n\r\n    );\r\n};\r\n\r\nexport default QuoteDetail;"],"sourceRoot":""}